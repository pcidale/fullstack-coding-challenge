import os
import requests
import json
from flask import Blueprint, render_template, request, jsonify
from models import db, Translation, TranslationStatus

unbabel_app = Blueprint('translation_app', __name__)

#  ------------------------------------  #
#  API resources
#  ------------------------------------  #
# Credentials
UNBABEL_API_USR = os.getenv('UNBABEL_API_USR')
UNBABEL_API_KEY = os.getenv('UNBABEL_API_KEY')

# Base URL
URL = 'https://sandbox.unbabel.com/tapi/v2/translation/'

# Default body
DATA = {
    "text": "Hello, how are you?",
    "source_language": "en",
    "target_language": "es",
    "text_format": "text"
}

# Headers
HEADERS = {
    'content-type': 'application/json',
    'Authorization': f'ApiKey {UNBABEL_API_USR}:{UNBABEL_API_KEY}'
}


#  ------------------------------------  #
#  Routes
#  ------------------------------------  #
@unbabel_app.route('/', methods=['GET'])
def home():
    """
        Loads the translations from the db, ordered by length of the translated text, to populate
        the homepage template.

    :return: render_template with the translations
    """

    translations = Translation.query.order_by(Translation.output_text).all()
    translations.sort(key=lambda translation: len(translation.output_text))
    return render_template('pages/home.html', translations=translations)


@unbabel_app.route('/translations', methods=['POST'])
def translate():
    """
        Makes a request to the Unbabel API and, if succeeds, inserts a new translation register in the db
        with the first status of the flow, 'requested'.

    :return: redirect the page to the homepage
    """

    DATA.update({'text': request.json.get('source-text')})
    r = requests.post(URL,
                      data=json.dumps(DATA),
                      headers=HEADERS)
    if r.status_code == 201:
        translation = Translation(
            uid=r.json()['uid'],
            source_language_id=1,
            input_text=r.json()['text'],
            target_language_id=2,
            output_text='',
            status_id=1
        )
        try:
            db.session.add(translation)
            db.session.commit()
            success = True
        except:
            db.session.rollback()
            success = False
        if success:
            return jsonify(
                {
                    'success': True,
                    'uid': r.json()['uid']
                }
            ), 201
        else:
            return jsonify({'success': False}), 500
    else:
        return jsonify({'success': False}), r.status_code


@unbabel_app.route('/translations/<uid>/', methods=['PATCH'])
def update_translation(uid):
    """
        Updates a translation in the db, inserting the translated text provided by the Unbabel API

    :param uid: uid generated by the Unbabel API
    :return: json with the new data
    """

    r = requests.get(URL + uid + '/',
                     headers=HEADERS)
    if r.status_code == 200:
        translation = Translation.query.get(uid)
        if r.json().get('status', '') == 'completed':
            translation.output_text = r.json()['translatedText']
            translation.status_id = 3
        elif r.json().get('status', '') in ['new', 'translating', "accepted"]:
            translation.status_id = 2
        elif r.json().get('status', ''):
            return jsonify(
                {
                    'success': False,
                    'uid': uid,
                    'status': r.json().get('status')
                }
            ), 500
        else:
            return jsonify(
                {
                    'success': False,
                    'uid': uid
                }
            ), 400
        try:
            db.session.commit()
        except:
            db.session.rollback()
        return jsonify(
            {
                'success': True,
                'uid': uid,
                'status': TranslationStatus.query.get(translation.status_id).status,
                'output_text': Translation.query.get(uid).output_text
            }
        ), 200
    else:
        return jsonify(
            {
                'success': False,
                'uid': uid
            }
        ), r.status_code


@unbabel_app.route('/translations/<uid>/', methods=['DELETE'])
def delete_translation(uid):
    """
        Deletes a translation register in db.

    :param uid: uid generated by the Unbabel API
    :return: json with success boolean
    """

    try:
        translation = Translation.query.get(uid)
        db.session.delete(translation)
        db.session.commit()
        success = True
    except:
        db.session.rollback()
        success = False
    return jsonify(
        {
            'success': success,
            'uid': uid
        }
    )


def bad_request(e):
    return render_template('errors/400.html'), 400


def page_not_found(e):
    return render_template('errors/404.html'), 404


def method_not_allowed(e):
    return render_template('errors/405.html'), 405


def unprocessable(e):
    return render_template('errors/422.html'), 422


def internal_server_error(e):
    return render_template('errors/500.html'), 500
